{"version":3,"sources":["components/Header.jsx","hooks/useSelect.js","components/Formulario.jsx","components/Noticia.jsx","components/ListadoNoticia.jsx","App.js","serviceWorker.js","index.js","components/Formulario.module.css"],"names":["Header","titulo","className","href","useSelect","stateInicial","opciones","useState","state","setState","value","onChange","e","target","map","opcion","key","label","Formulario","setCategoria","categoria","SelectNoticias","styles","buscador","onSubmit","preventDefault","heading","type","btn_block","Noticia","noticia","urlToImage","url","title","description","source","imagen","src","alt","name","rel","ListadoNoticia","noticias","App","setNoticias","useEffect","a","fetch","respuesta","json","articles","consultarAPI","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.1967537b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({ titulo }) => {\n    return (\n        <nav className=\"nav-wrapper light-blue darken-3\">\n            <a href=\"#!\" className=\"brand-logo center\">{titulo}</a>\n        </nav>\n    );\n}\n\nHeader.propTypes = {\n    titulo: PropTypes.string.isRequired\n}\n\nexport default Header;","import React, { useState } from 'react';\n\nconst useSelect = (stateInicial, opciones) => {\n\n    //state del custom hook\n    const [state, setState] = useState(stateInicial);\n\n    const SelectNoticias = () => (\n        <select\n            className=\"browser-default\"\n            value={state}\n            onChange={e => setState(e.target.value)}\n        >\n            {opciones.map(opcion => (\n                <option key={opcion.value} value={opcion.value}>{opcion.label}</option>\n            ))}\n        </select>\n    );\n\n    return [state, SelectNoticias];\n}\n\nexport default useSelect;","import React from 'react';\nimport styles from './Formulario.module.css';\nimport useSelect from '../hooks/useSelect';\nimport PropTypes from 'prop-types';\n\nconst Formulario = ({ setCategoria }) => {\n\n    const OPCIONES = [\n        { value: 'general', label: 'General' },\n        { value: 'business', label: 'Negocios' },\n        { value: 'entertainment', label: 'Entretenimiento' },\n        { value: 'health', label: 'Salud' },\n        { value: 'science', label: 'Ciencia' },\n        { value: 'sports', label: 'Deportes' },\n        { value: 'technology', label: 'Tecnología' },\n    ];\n\n    // utilizar custom hook\n    const [categoria, SelectNoticias] = useSelect('general', OPCIONES);\n\n    // submit al form, pasar categoria a app.js\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        setCategoria(categoria);\n    }\n\n    return (\n        <div className={`${styles.buscador}  row`}>\n            <div className=\"col s12 m8 offset-m2\">\n                <form\n                    onSubmit={handleSubmit}\n                >\n                    <h2 className={styles.heading}>Encuentra Noticias por Categoría</h2>\n\n                    <SelectNoticias />\n\n                    <div className=\"input-field col s12\">\n                        <input\n                            type=\"submit\"\n                            className={`${styles.btn_block} btn-large amber darken-2`}\n                            value=\"Buscar\"\n                        />\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nFormulario.propTypes = {\n    setCategoria: PropTypes.func.isRequired\n}\n\nexport default Formulario;\n\n/**\n * en css ---> .btn_block ---> en jsx ---> ${styles.btn_block}\n * en css ---> .btn-block ---> en jsx ---->${styles['btn-block']}\n */","import React from 'react';\nimport '../index.css';\nimport PropTypes from 'prop-types';\n\nconst Noticia = ({ noticia }) => {\n\n    // extraer los datos\n    const { urlToImage, url, title, description, source } = noticia;\n\n    const imagen = (urlToImage)\n        ?\n        <div className=\"card-image\">\n            <img src={urlToImage} alt={title} />\n            <span className=\"card-title\">{source.name}</span>\n        </div>\n        :\n        null;\n\n    return (\n        <div className=\"col s12 m6 l4\">\n            <div className=\"card\">\n                {imagen}\n                <div className=\"card-content\">\n                    <h3 className=\"texto\">{title}</h3>\n                    <p>{description}</p>\n                </div>\n                <div className=\"card-action\">\n                    <a\n                        href={url}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"waves-effect waves-light btn\"\n                    >Ver Noticia Completa</a>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nNoticia.propTypes = {\n    noticia: PropTypes.object.isRequired\n}\n\nexport default Noticia;","import React from 'react';\nimport Noticia from './Noticia';\nimport PropTypes from 'prop-types';\n\nconst ListadoNoticia = ({ noticias }) => {\n    return (\n        <div className=\"row\">\n            {noticias.map(noticia => (\n                <Noticia\n                    key={noticia.url}\n                    noticia={noticia}\n                />\n            ))}\n        </div>\n    );\n}\n\nListadoNoticia.propTypes = {\n    noticias: PropTypes.array.isRequired\n}\n\nexport default ListadoNoticia;","import React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport ListadoNoticia from './components/ListadoNoticia';\n\nfunction App() {\n\n  // definir la categoria y noticias\n  const [categoria, setCategoria] = useState('');\n  const [noticias, setNoticias] = useState([]);\n\n  // USE EFFECT\n  useEffect(() => {\n    const consultarAPI = async () => {\n      const url = `https://newsapi.org/v2/top-headlines?country=ar&category=${categoria}&apiKey=a64e48af6e04498981295d9b0274a589`\n\n      const respuesta = await fetch(url);\n      const noticias = await respuesta.json();\n      setNoticias(noticias.articles);\n    }\n    consultarAPI();\n  }, [categoria])\n\n\n  return (\n    <>\n      <Header\n        titulo=\"Buscador de Noticias\"\n      />\n\n      <div className=\"container white\">\n        <Formulario\n          setCategoria={setCategoria}\n        />\n        <ListadoNoticia\n          noticias={noticias}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n/**traernos las noticias de esa categoria seleccionada */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"Formulario_heading__sN5Ey\",\"buscador\":\"Formulario_buscador__2ABO4\",\"btn_block\":\"Formulario_btn_block__3xO29\"};"],"sourceRoot":""}